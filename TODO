
Performance tests:

- Add time-on-alphabet-size charts [fixed input size, varying alphabet]

- Add speed on various JVMs [fixed input, fixed alphabet, varying JVM]

- Tests should perform an average of N samples for each input configuration
  (should it be done by the scripts or by the Java test classes?)

Various things and ideas:

- Measure memory allocation (there should be none or minimal for almost any algorithm). 
  GC will always downgrade performance.

- Is it possible to write an aspect tracking allocation of primitive type arrays? Would
  it be helpful to write it so that we know how much memory an algorithm asks for (this
  is not necessarily the peak memory, since some of it may be garbage collected, but just
  the amount of allocated memory will indicate possible GC load).

- Write a test comparing speed of LCP calculation (naive vs. Kasai) 
  for various random inputs.

- We will need an external bundle with performance tests (and their results?) appearing
  in literature. This will be used to measure performance. Add a test similar to 
  TimeOnRandomInput, but running on these files instead. Can we compile/ compare with the
  C versions of some of these algorithms? Remember to use GCC with -O3 (optimize heavily)
  switch.

- Can we try to launch the performance tests under exotic VMs, such as:
  - JamVM, http://jamvm.sourceforge.net/
  - CACAO, http://www.cacaojvm.org/
  - Jikes RVM

- Can we compile to CIL (.NET) via IKVM, then to native code (Mono or Microsoft's compilers). 
  Will it go faster or slower?
